{"version":3,"sources":["Components/Screen.js","keypadSetup.js","Components/ButtonOperator.js","Components/ButtonNumber.js","Components/Keypad.js","serviceWorker.js","index.js","App.js"],"names":["Screen","_ref","display","react_default","a","createElement","className","keypad","type","value","action","x","y","Number","ButtonOperator","setDisplay","_ref$history","history","total","operation","currentValue","setHistory","onClick","_","concat","newTotal","undefined","ButtonNumber","newValue","isNaN","error","Keypad","keys","map","row","indRow","key","_ref2","indKey","ButtonNumber_ButtonNumber","ButtonOperator_ButtonOperator","Boolean","window","location","hostname","match","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","Fragment","Screen_Screen","Keypad_Keypad","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05518a46.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Screen.css'\r\n\r\nexport const Screen = ({ display }) => {\r\n  return (\r\n    <div className='screen'>\r\n      <p>{display}</p>\r\n    </div>\r\n  )\r\n}\r\n","export const keypad = {\r\n  setup () {\r\n    const add = x => y => Number(x) + Number(y)\r\n    const sub = x => y => Number(x) - Number(y)\r\n    const div = x => y => Number(x) / Number(y)\r\n    const mul = x => y => Number(x) * Number(y)\r\n\r\n    return [\r\n      [{ type: 'number', value: '7' }, { type: 'number', value: '8' }, { type: 'number', value: '9' }, { type: 'operator', value: '/', action: div }],\r\n      [{ type: 'number', value: '4' }, { type: 'number', value: '5' }, { type: 'number', value: '6' }, { type: 'operator', value: '*', action: mul }],\r\n      [{ type: 'number', value: '1' }, { type: 'number', value: '2' }, { type: 'number', value: '3' }, { type: 'operator', value: '-', action: sub }],\r\n      [{ type: 'number', value: '0' }, { type: 'number', value: '.' }, { type: 'operator', value: 'C' }, { type: 'operator', value: '+', action: add }],\r\n      [{ type: 'operator', value: '=' }]\r\n    ]\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport const ButtonOperator = ({ display, setDisplay, history: { total, operation, currentValue }, setHistory, value, action }) => {\r\n  const handleClick = _ => {\r\n    if (value === 'C') {\r\n      setHistory({})\r\n      setDisplay('')\r\n      return\r\n    }\r\n\r\n    if (value === '=') {\r\n      if (!operation) {\r\n        setHistory({ total, currentValue })\r\n      } else {\r\n        const newTotal = operation(total)(currentValue)\r\n        setHistory({ total: newTotal })\r\n        setDisplay(newTotal)\r\n      }\r\n      return\r\n    }\r\n\r\n    if (!currentValue && !operation) {\r\n      if (total !== undefined) {\r\n        setHistory({ operation: action, total })\r\n        setDisplay(`${total}${value}`)\r\n      }\r\n      return\r\n    }\r\n\r\n    if (!operation) {\r\n      setHistory({ total: currentValue, operation: action })\r\n      setDisplay(`${display}${value}`)\r\n      return\r\n    }\r\n    const newTotal = !total\r\n      ? currentValue\r\n      : action(total)(currentValue)\r\n    setHistory({ total: newTotal, operation: action })\r\n    setDisplay(`${total}${value}`)\r\n  }\r\n\r\n  return <button onClick={handleClick} >{value}</button>\r\n}\r\n","import React from 'react'\r\n\r\nexport const ButtonNumber = ({ value, setDisplay, display, history: { total, operation, currentValue }, setHistory }) => {\r\n  const handleClick = _ => {\r\n    if (!currentValue) {\r\n      if (value === '.') {\r\n        value = '0.'\r\n      }\r\n      if (!operation) {\r\n        setDisplay(`${value}`)\r\n        setHistory({ currentValue: value })\r\n      } else {\r\n        setDisplay(`${display}${value}`)\r\n        setHistory({ total, operation, currentValue: value })\r\n      }\r\n      return\r\n    }\r\n\r\n    const newValue = `${currentValue}${value}`\r\n    try {\r\n      if (Number.isNaN(Number(newValue))) {\r\n        return\r\n      }\r\n    } catch (error) {\r\n      return\r\n    }\r\n    setDisplay(`${display}${value}`)\r\n    setHistory({ total, operation, currentValue: newValue })\r\n  }\r\n\r\n  return <button onClick={handleClick} >{value}</button>\r\n}\r\n","import React from 'react'\r\nimport { keypad } from '../keypadSetup'\r\nimport { ButtonOperator } from './ButtonOperator'\r\nimport { ButtonNumber } from './ButtonNumber'\r\nimport './Keypad.css'\r\n\r\nexport const Keypad = ({ display, setDisplay, history, setHistory }) => {\r\n  const keys = keypad.setup()\r\n  return (\r\n    <section className='keypad'>\r\n      {keys.map((row, indRow) => <div key={indRow} >{row.map(({ type, value, action }, indKey) => type === 'number'\r\n        ? <ButtonNumber key={`${indRow}_${indKey}`} history={history} setHistory={setHistory} display={display} setDisplay={setDisplay} value={value} />\r\n        : <ButtonOperator key={`${indRow}_${indKey}`} display={display} setDisplay={setDisplay} history={history} setHistory={setHistory} value={value} action={action} />\r\n      )}</div>)}\r\n    </section>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  /* global fetch */\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport './reset.css'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, { useState } from 'react'\nimport './App.css'\nimport { Screen } from './Components/Screen'\nimport { Keypad } from './Components/Keypad'\n\nexport const App = () => {\n  const [history, setHistory] = useState({})\n  const [display, setDisplay] = useState('')\n\n  return (\n    <>\n      <Screen display={display} />\n      <Keypad setDisplay={setDisplay} display={display} setHistory={setHistory} history={history} />\n    </>\n  )\n}\n"],"sourceRoot":""}